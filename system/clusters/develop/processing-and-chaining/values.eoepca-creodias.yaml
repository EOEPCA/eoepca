replicaCount: 1
image:
  repository: eoepca/proc-ades
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "devlatest"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
  # fsGroup: 2000
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  annotations: {}
  hosts:
    - host: ades.185.52.193.87.nip.io
      paths: ["/"]
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 1
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 2Gi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
storageClassName: managed-nfs-storage
clusterAdminRoleName: cluster-admin
nodeSelector: {}
tolerations: []
affinity: {}
useKubeProxy: True
workflowExecutor:
  # Necessary if useKubeProxy set to false
  # kubeconfig: "files/kubeconfig"

  # Here specify fixed inputs to all workflows execution in all stages (main, stage-in/out)
  # They will be prefixed with 'ADES_'. e.g. 'APP: ades' will be 'ADES_APP: ades'
  inputs:
    APP: ades

    STAGEIN_AWS_SERVICEURL: http://data.cloudferro.com
    STAGEIN_AWS_ACCESS_KEY_ID: test
    STAGEIN_AWS_SECRET_ACCESS_KEY: test

    STAGEOUT_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
    STAGEOUT_AWS_ACCESS_KEY_ID: SCW96Y8P089TRZHV9HY2
    STAGEOUT_AWS_SECRET_ACCESS_KEY: 04c39142-faab-40b6-a9ab-5239805b4e77
    STAGEOUT_AWS_REGION: fr-par
    STAGEOUT_OUTPUT: s3://eoepca-ades


#    STAGEOUT_STORAGE_HOST: https://nx13206.your-storageshare.de/
#    STAGEOUT_STORAGE_USERNAME: eoepca-storage
#    STAGEOUT_STORAGE_APIKEY: 4k8wMajA5ABaYdk

  main:
    cwl: ""

  stagein:
    cwl: ""

  stageout:
    cwl: ""

  rulez:
    cwl: ""

  # kubernetes storage class to be used for provisioning volumes. Must be a persistent volume claim compliant (glusterfs-storage)
  processingStorageClass: managed-nfs-storage 
  # Size of the Kubernetes Tmp Volumes
  processingVolumeTmpSize: "6Gi"
  # Size of the Kubernetes Output Volumes
  processingVolumeOutputSize: "6Gi"
  # Max ram to use for a job
  processingMaxRam: "8Gi"
  # Max number of CPU cores to use concurrently for a job
  processingMaxCores: "2"
  # if false the Ades will clean the volume after the workflow has successfully finished running
  processingKeepWorkspace: "False"
  # image pull secrects
  imagePullSecrets: 
    - name: "terradue"
  #  custom stagein cwl
  #stageincwl: "files/stageincwl.cwl"
  #maincwl: "files/maincwlmetrics.cwl"
wps:
  pepBaseUrl: "http://mock-pep"
  usePep: "false"
  maincfgtpl: "files/main.cfg.tpl"
persistence:
  enabled: true
  # existingUserDataClaim:
  # existingProcServicesClaim:
  storageClass: "managed-nfs-storage"
  userDataAccessMode: ReadWriteOnce
  userDataSize: 10Gi
  procServicesAccessMode: ReadWriteOnce
  procServicesSize: 5Gi
