apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vs
spec:
  interval: 5m
  chart:
    spec:
      chart: data-access
      version: 1.3.0-rc1
      sourceRef:
        kind: HelmRepository
        name: eoepca
        namespace: common
  values:
    global:
      env:
        REGISTRAR_REPLACE: "true"
        CPL_VSIL_CURL_ALLOWED_EXTENSIONS: .TIF,.tif,.xml,.jp2,.jpg,.jpeg
        startup_scripts: []

      # the tls host is still needed to provide the hostname for the view server client
      ingress:
        enabled: false
        tls:
          - hosts:
              - data-access.{{ workspace_name }}.develop.eoepca.org
        prefix:
          enabled: false
          # value: "{{ workspace_name }}"

      storage:
        data:
          # Storage details for data source
          data:
            # TODO: this values are secret pass them as secret
            type: "S3"
            endpoint_url: https://minio.develop.eoepca.org
            access_key_id: {{ access_key_id }}
            secret_access_key: {{ secret_access_key }}
            bucket: {{ bucket }}
            region_name: RegionOne
            validate_bucket_name: false

        # Object storage for data access cache
        cache: {}
          # type: S3
          # endpoint_url: "https://cf2.cloudferro.com:8080/cache-bucket"
          # host: "cf2.cloudferro.com:8080"
          # region_name: RegionOne
          # region: RegionOne
          # bucket: cache-bucket

      # Service metadata
      metadata:
        title: Data Access Service - {{ workspace_name }}
        # more - see values for `vs` chart...

      # product types - linked to data assets
      productTypes: []

      # collections - linked to product types
      collections: {}

      # layers for WMS service
      layers: []

    vs:
      renderer:
        replicaCount: 1
        ingress:
          enabled: false
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
          limits:
            memory: 3Gi

      registrar:
        replicaCount: 1
        # image:
          # tag: "latest"
          # pullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        config:
          disableDefaultRoute: true
          routes:
            items:
              path: registrar.route.stac.ItemRoute
              queue: register_queue
              replace: true
              backends:
                - path: "registrar.backend.eoxserver.ItemBackend"
                  kwargs:
                    instance_base_path: "/var/www/pvs/dev"
                    instance_name: "pvs_instance"
                    product_types: []
                    auto_create_product_types: True
                    automatic_visibilities: ["wms", "wcs"]
                - path: "registrar_pycsw.backend.ItemBackend"
                  kwargs:
                    repository_database_uri: "postgresql://postgres:mypass@resource-catalogue-db/pycsw"
                    ows_url: "https://data-access.{{ workspace_name }}.develop.eoepca.org/ows"
                    public_s3_url: "https://minio.develop.eoepca.org/{{ bucket }}"
            collections:
              path: registrar.route.stac.CollectionRoute
              queue: register_collection_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.CollectionBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            ades:
              path: registrar.route.json.JSONRoute
              queue: register_ades_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.ADESBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            application:
              path: registrar.route.json.JSONRoute
              queue: register_application_queue
              replace: true
              kwargs:
                href_field: url
              backends:
                - path: registrar_pycsw.backend.CWLBackend
                  kwargs:
                    repository_database_uri: "postgresql://postgres:mypass@resource-catalogue-db/pycsw"
                    ows_url: "https://data-access.{{ workspace_name }}.develop.eoepca.org/ows"
                    public_s3_url: "https://minio.develop.eoepca.org/{{ bucket }}"
            catalogue:
              path: registrar.route.json.JSONRoute
              queue: register_catalogue_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.CatalogueBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            json:
              path: registrar.route.json.JSONRoute
              queue: register_json_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.JSONBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw
            xml:
              path: registrar.route.json.JSONRoute
              queue: register_xml_queue
              replace: true
              backends:
                - path: registrar_pycsw.backend.XMLBackend
                  kwargs:
                    repository_database_uri: postgresql://postgres:mypass@resource-catalogue-db/pycsw

      harvester:
        image:
          tag: "latest"
          pullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        config:
          redis:
            host: vs-redis-master
            port: 6379
          harvesters:
            # Static STAC catalogue in the user's bucket storage
            harvest-bucket-catalog:
              queue: "register_queue"
              resource:
                type: "STACCatalog"
                staccatalog:
                  filesystem: s3bucket
          filesystems:
            s3bucket:
              type: s3
              s3:
                access_key_id: {{ access_key_id }}
                secret_access_key: {{ secret_access_key }}
                endpoint_url: https://minio.develop.eoepca.org
                region: RegionOne
                public: False

      client:
        ingress:
          enabled: false
        config:
          serviceUrl: "//data-access.{{ workspace_name }}.develop.eoepca.org/"
          eoxserverDownloadEnabled: true
        #   timeDomain:
        #     - "2002-01-01T00:00:00Z"
        #     - "customClientDateFuture1"
        #   displayTimeDomain:
        #     - "customClientDatePast1"
        #     - "customClientDateFuture1"
        #   selectedTimeDomain:
        #     - "customClientDatePast2"
        #     - "today"
        #   customClientDaysPast1: 90
        #   customClientDaysPast2: 1
        #   customClientDaysFuture1: 7

      database:
        persistence:
          enabled: true
          existingClaim: "" # we want the claim to be generated
          storageClass: managed-nfs-storage
          size: "100Gi"
        # postgresqlTcpKeepalivesInterval: "30"
        # postgresqlTcpKeepalivesIdle: "600"
        # postgresqlTcpKeepalivesCount: "10"
        # postgresqlMaxConnections: "300"

      redis:
        usePassword: false
        persistence:
          existingClaim: "" # we want the claim to be generated
        master:
          persistence:
            existingClaim: "" # we want the claim to be generated
            storageClass: managed-nfs-storage
            size: "1Gi"
        cluster:
          enabled: false

      scheduler:
        resources:
          requests:
            cpu: 100m
            memory: 100Mi

      ingestor:
        replicaCount: 0
        ingress:
          enabled: false  # doesn't support subpaths yet

      preprocessor:
        replicaCount: 0

      cache:
        replicaCount: 0
        ingress:
          enabled: false

      seeder:
        replicaCount: 0
        config:
          minzoom: 0
          maxzoom: 6  # restrict to only 6 for testing for now
