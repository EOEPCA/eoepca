vs:
  config:
    general:
      COLLECTION: COLLECTION
      CPL_VSIL_CURL_ALLOWED_EXTENSIONS: .TIF,.tif,.xml,.jp2
      GDAL_DISABLE_READDIR_ON_OPEN: "TRUE"
      COLLECT_STATIC: "false"
      AWS_VIRTUAL_HOSTING: "FALSE"
      AWS_S3_ENDPOINT: cf2.cloudferro.com:8080
      AWS_HTTPS: "YES"
      REGISTRAR_REPLACE: "true"
    database:
      DB_NAME: dbname
      DB_PORT: "5432"
      DB_PW: dbpw
      DB_USER: dbuser
      POSTGRES_DB: dbname
      POSTGRES_PASSWORD: dbpw
      POSTGRES_USER: dbuser
    django:
      DJANGO_MAIL: office@eox.at
      DJANGO_PASSWORD: djangopw
      DJANGO_USER: djangouser
      # TODO: replace once newer chart available
      DJANGO_SECRET_KEY: "WORKSPACE_SECRET_KEY"
    objectStorage:
      download:
        type: swift
        username: "username"
        password: "password"
        tenant_name: "tenant_name"
        tenant_id: "tenant_id"
        region_name: "region_name"
        auth_url: "auth_url"
        auth_url_short: "auth_url_short"
        auth_version: "auth_version"
        user_domain_name: "user_domain_name"
      data:
        data:
          type: S3
          endpoint_url: https://cf2.cloudferro.com:8080
          region: RegionOne
          validate_bucket_name: False
      cache:
        type: local
        # type: S3
        # endpoint_url: "http://data.cloudferro.com"
        # access_key_id: access
        # secret_access_key: access
        # region: RegionOne
    redis:
      # REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PREPROCESS_QUEUE_KEY: preprocess_queue
      REDIS_QUEUE_KEY: seed_queue
      REDIS_REGISTER_QUEUE_KEY: register_queue
      REDIS_REGISTERED_SET_KEY: registered_set
      REDIS_SEED_QUEUE_KEY: seed_queue
      REDIS_SET_KEY: registered_set
    client:
      title: EOEPCA Data Access View Server Client
      header: "EOEPCA Data Access View Server (VS) Client powered by <a href=\"//eox.at\"><img src=\"//eox.at/wp-content/uploads/2017/09/EOX_Logo.svg\" alt=\"EOX\" style=\"height:25px;margin-left:10px\"/></a>"
      layers:
        - id: DATA
          display_color: '#eb3700'
          title: Data
          layer: DATA
          sub_layers: []
      overlay_layers: {}
      time_domain: ["2019-01-01T00:00:00Z", "2021-12-31T23:59:59Z"]
      display_time_domain: ["2020-06-01T00:00:00Z", "2021-06-31T23:59:59Z"]
      selected_time_domain: ["2021-05-01T00:00:00Z", "2021-05-31T23:59:59Z"]
    # cache related options
    cache:
      metadata:
        title: EOEPCA Data Access Service developed by EOX
        abstract: EOEPCA Data Access Service developed by EOX
        url: https://ecma/cache/ows
        keyword: view service
        accessconstraints: UNKNOWN
        fees: UNKNOWN
        contactname: Stephan Meissl
        contactphone: Please contact via mail.
        contactfacsimile: None
        contactorganization: EOX IT Services GmbH
        contactcity: Vienna
        contactstateorprovince: Vienna
        contactpostcode: 1090
        contactcountry: Austria
        contactelectronicmailaddress: office@eox.at
        contactposition: CTO
        providername: EOX
        providerurl: https://eox.at
        inspire_profile: true
        inspire_metadataurl: TBD
        defaultlanguage: eng
        language: eng
      services:
        wms:
          enabled: true
        wmts:
          enabled: true
      connection_timeout: 10
      timeout: 120
      expires: 3600
      key: /{tileset}/{grid}/{dim}/{z}/{x}/{y}.{ext}
      tilesets:
        DATA:
          title: Data
          abstract: Data
          grids:
            - name: WGS84
              zoom: 13
    preprocessor:
      metadata_glob: '*GSC*.xml'
      type_extractor:
        xpath:
          - /gsc:report/gsc:opt_metadata/gml:using/eop:EarthObservationEquipment/eop:platform/eop:Platform/eop:shortName/text()
      level_extractor:
        # xpath can also be a list of xpaths to be tried one after another
        xpath: substring-after(substring-after(/gsc:report/gsc:opt_metadata/gml:metaDataProperty/gsc:EarthObservationMetaData/eop:parentIdentifier/text(), '/'), '/')
      preprocessing:
        defaults:
          move_files: true
          data_file_globs:
            - '*.tif'
            - '*.jp2'
          output:
            options:
              format: COG
              dstSRS: 'EPSG:4326'
              dstNodata: 0
              creationOptions:
                - BLOCKSIZE=512
                - COMPRESS=DEFLATE
                - NUM_THREADS=8
                - BIGTIFF=IF_SAFER
                - OVERVIEWS=AUTO
        types: {}
    registrar:
      disable_default_eoxserver: true
      schemes:
        - type: stac-item
          filter: ".*/wf-.*/.*"
          kwargs:
            # use a non-existent property on purpose to fix product-type to None
            product_type_property: does-not-exist
        - path: registrar_pycsw.scheme.CWLRegistrationScheme
          filter: ".*/application-package/.*"
      # Backend configuration is done directly in the Workspace API
      mapping:
        '':
          '': {}
    # mapping of collection name to objects
    collections:
      DATA:
        product_types: []
        product_levels: []
        coverage_types: []
    products:
      type_extractor:
        xpath:
          - /gsc:report/gsc:opt_metadata/gml:using/eop:EarthObservationEquipment/eop:platform/eop:Platform/eop:shortName/text()
          - /gsc:report/gsc:sar_metadata/gml:using/eop:EarthObservationEquipment/eop:platform/eop:Platform/eop:shortName/text()
        namespace_map:
      level_extractor:
        xpath:
        namespace_map:
      types:
        nhi2_nhi2_bitmask_nhi1_nhi1_bitmask:
          coverages:
            nhi1: nhi1
            nhi1_bitmask: nhi1_bitmask
            nhi2: nhi2
            nhi2_bitmask: nhi2_bitmask
          default_browse: nhi1
          browses:
            nhi1:
              grey:
                expression: nhi1
                range: [-1, 1]
            nhi2:
              grey:
                expression: nhi2
                range: [-1, 1]
      coverages:
        - name: nhi1
          data_type: Float32
          bands:
            - identifier: nhi1
              name: nhi1
              definition: http://www.opengis.net/def/property/OGC/0/Radiance
              description: NHI-1
              gdal_interpretation: GrayBand
              nil_values: []
              uom: nhi1
              significant_figures: 5
              allowed_value_ranges:
                - [-1, 1]
        - name: nhi1_bitmask
          data_type: Byte
          bands:
            - identifier: nhi1_bitmask
              name: nhi1_bitmask
              definition: http://www.opengis.net/def/property/OGC/0/Radiance
              description: NHI-1 Bitmask
              gdal_interpretation: GrayBand
              nil_values: []
              uom: nhi1_bitmask
              significant_figures: 1
              allowed_value_ranges:
                - [0, 1]
        - name: nhi2
          data_type: Float32
          bands:
            - identifier: nhi2
              name: nhi2
              definition: http://www.opengis.net/def/property/OGC/0/Radiance
              description: NHI-2
              gdal_interpretation: GrayBand
              nil_values: []
              uom: nhi2
              significant_figures: 5
              allowed_value_ranges:
                - [-1, 1]
        - name: nhi2_bitmask
          data_type: Byte
          bands:
            - identifier: nhi2_bitmask
              name: nhi2_bitmask
              definition: http://www.opengis.net/def/property/OGC/0/Radiance
              description: NHI-2 Bitmask
              gdal_interpretation: GrayBand
              nil_values: []
              uom: nhi2_bitmask
              significant_figures: 1
              allowed_value_ranges:
                - [0, 1]
  database:
    persistence:
      enabled: true
      existingClaim: data-access-db
    postgresqlUsername: dbuser
    postgresqlPassword: dbpw
    postgresqlDatabase: dbname
    postgresqlPostgresPassword: dbpgpw
    replicaCount: 1
    resources:
      limits:
        cpu: "1.5"
        memory: 6Gi
      requests:
        cpu: "0.1"
        memory: 0.5Gi
    affinity: {}
  preprocessor:
    replicaCount: 1
    resources:
      limits:
        cpu: 1.5
        memory: 6Gi
      requests:
        cpu: 0.1
        memory: 0.5Gi
    affinity: {}
  registrar:
    image:
      repository: eoepca/rm-data-access-core
      tag: latest
      pullPolicy: Always
    replicaCount: 1
    resources:
      limits:
        cpu: 1.5
        memory: 6Gi
      requests:
        cpu: 0.1
        memory: 0.5Gi
    affinity: {}
  renderer:
    image:
      repository: eoepca/rm-data-access-core
      tag: latest
      pullPolicy: Always
    replicaCount: 1
    resources:
      limits:
        cpu: 1.5
        memory: 6Gi
      requests:
        cpu: 0.5
        memory: 1.5Gi
    affinity: {}
  client:
    replicaCount: 1
    resources:
      limits:
        cpu: 0.5
        memory: 1Gi
      requests:
        cpu: 0.1
        memory: 0.1Gi
  cache:
    replicaCount: 1
    resources:
      limits:
        cpu: 0.5
        memory: 1Gi
      requests:
        cpu: 0.1
        memory: 0.1Gi
  replicaCount: 1
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      cert-manager.io/cluster-issuer: letsencrypt
    hosts: []
    tls:
      - hosts: []
        secretName: data-access-tls
  affinity: {}
  redis:
    usePassword: false
    persistence:
      existingClaim: data-access-redis
    master:
      persistence:
        enabled: true
        storageClass: managed-nfs-storage
    cluster:
      enabled: false

rm-resource-catalogue:
  global:
    namespace: rm-user1
  db:
    name: resource-catalogue-db
    service_name: resource-catalogue-db-service
    image: postgis/postgis:12-3.1
    port: 5432
    database: pycsw
    user: postgres
    pass: mypass
    volume_name: resource-catalogue-db-data
    volume_path: /var/lib/postgresql/data/pgdata
    # persistent_volume_name: pvc-04eeafdd-510d-4b6d-8e26-b13ff4d37395
    volume_size: 500Mi
    volume_access_modes: ReadWriteMany
    volume_storage_type: managed-nfs-storage
  ingress:
    name: resource-catalogue
    class: nginx
    host: resource-catalogue.user.185.52.193.87.nip.io
    tls_host: resource-catalogue.user.185.52.193.87.nip.io
    tls_secret_name: resource-catalogue-user-tls
  pycsw:
    name: resource-catalogue
    image: geopython/pycsw:latest
    container_port: 8000
    service_name: resource-catalogue-service
    service_type: ClusterIP
    service_port: 80
    service_port_name: http
    # service_node_port: 30000
    service_port_protocol: TCP
    service_target_port: 8000
    configmap_name: resource-catalogue-configmap
    volume_name: resource-catalogue-config
    volume_path: /etc/pycsw
    config:
      server:
        home: /home/pycsw
        url: http://resource-catalogue.user.185.52.193.87.nip.io/
        mimetype: application/xml; charset=UTF-8
        encoding: UTF-8
        language: en-US
        maxrecords: 10
        loglevel: DEBUG
        logfile: " "
        # ogc_schemas_base: http://foo
        federatedcatalogues: https://resource-catalogue.185.52.193.87.nip.io/
        # pretty_print: true
        # gzip_compresslevel: 8
        # domainquerytype: range
        # domaincounts: true
        # spatial_ranking: true
        profiles: apiso
      manager:
        transactions: "false"
        allowed_ips: 127.0.0.1
        # csw_harvest_pagesize: 10
      metadata:
        identification_title: pycsw Geospatial Catalogue
        identification_abstract: pycsw is an OGC CSW server implementation written in Python
        identification_keywords: catalogue,discovery,metadata
        identification_keywords_type: theme
        identification_fees: None
        identification_accessconstraints: None
        provider_name: Organization Name
        provider_url: https://pycsw.org/
        contact_name: Lastname, Firstname
        contact_position: Position Title
        contact_address: Mailing Address
        contact_city: City
        contact_stateorprovince: Administrative Area
        contact_postalcode: Zip or Postal Code
        contact_country: Country
        contact_phone: +xx-xxx-xxx-xxxx
        contact_fax: +xx-xxx-xxx-xxxx
        contact_email: Email Address
        contact_url: Contact URL
        contact_hours: Hours of Service
        contact_instructions: During hours of service.  Off on weekends.
        contact_role: pointOfContact
      repository:
        database: postgresql://postgres:mypass@resource-catalogue-db/pycsw
        table: records
        # mappings: path/to/mappings.py
        # filter: type = 'http://purl.org/dc/dcmitype/Dataset'
      inspire:
        enabled: "true"
        languages_supported: eng,gre
        default_language: eng
        date: YYYY-MM-DD
        gemet_keywords: Utility and governmental services
        conformity_service: notEvaluated
        contact_name: Organization Name
        contact_email: Email Address
        temp_extent: YYYY-MM-DD/YYYY-MM-DD
