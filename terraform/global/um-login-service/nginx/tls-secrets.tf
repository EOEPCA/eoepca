resource "tls_private_key" "key" {
  algorithm = "RSA"
  rsa_bits  = 2048
} # openssl dhparam -out dhparam.pem 2048
# Important Security Notice The private key generated by this resource will be stored unencrypted in your Terraform state file. 
# Use of this resource for production deployments is not recommended. 
# Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.

resource "local_file" "dhparam_pem" {
  content  = tls_private_key.key.public_key_pem
  filename = "./dhparam.pem"
}

resource "kubernetes_secret" "tls-dhparam" {
  metadata {
    name = "tls-dhparam"
  }

  data = {
    "dhparam.pem" = local_file.dhparam_pem.content
  }

  type = "kubernetes.io/generic"
} # secret generic tls-dhparam --from-file=dhparam.pem

data "kubernetes_secret" "gluu" {
  metadata {
    name = "gluu"
  }
  depends_on = [null_resource.waitfor-config-init]
}

resource "local_file" "ingress_crt" {
  content  = data.kubernetes_secret.gluu.data.ssl_cert
  filename = "./ingress.crt"
} # kubectl get secret gluu -o json | grep '\"ssl_cert' | awk -F '"' '{print $4}' | base64 --decode > ingress.crt

resource "local_file" "ingress_key" {
  content  = data.kubernetes_secret.gluu.data.ssl_key
  filename = "./ingress.key"
} # kubectl get secret gluu -o json | grep '\"ssl_key' | awk -F '"' '{print $4}' | base64 --decode > ingress.key

resource "kubernetes_secret" "tls-certificate" {
  metadata {
    name = "tls-certificate"
  }

  data = {
    "tls.crt" = local_file.ingress_crt.content
    "tls.key" = local_file.ingress_key.content
  }

  type = "kubernetes.io/tls"
} # kubectl create secret tls tls-certificate --key ingress.key --cert ingress.crt
